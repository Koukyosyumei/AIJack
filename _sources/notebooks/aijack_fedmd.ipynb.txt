{
  "cells": [
    {
      "attachments": {},
      "cell_type": "markdown",
      "metadata": {
        "id": "-Raof1tSFHmV"
      },
      "source": [
        "# FedMD: Federated Learning with Model Distillation\n",
        "\n",
        "This tutorial implements FedMD (Federated Learning with Model Distillation), proposed in https://arxiv.org/abs/1910.03581. AIJack supports both single-process and MPI as the backend of FedMD. While FedAVG communicates local gradients to collaboratively train a model without sharing local datasets, malicious servers might be able to recover the training data from the shared gradient (see *Gradient-based Model Inversion Attack against Federated Learning* for the detail). In addition, sending and receiving gradients of the model requires much communication power. To solve these challenges, FedMD communicates not gradients but predicted logits on the global dataset and uses the model-distillation method to share each party's knowledge."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "voM-bUr7FP2r"
      },
      "source": [
        "## Single Process"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "BrIO2C4zOzHz"
      },
      "outputs": [],
      "source": [
        "import random\n",
        "\n",
        "import numpy as np\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torch.optim as optim\n",
        "from mpi4py import MPI\n",
        "from torchvision import datasets, transforms\n",
        "\n",
        "from aijack.collaborative.fedmd import FedMDAPI, FedMDClient, FedMDServer\n",
        "from aijack.utils import NumpyDataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "MX9Cu0wmO69p"
      },
      "outputs": [],
      "source": [
        "def fix_seed(seed):\n",
        "    random.seed(seed)\n",
        "    np.random.seed(seed)\n",
        "    torch.manual_seed(seed)\n",
        "    torch.cuda.manual_seed_all(seed)\n",
        "    torch.backends.cudnn.deterministic = True\n",
        "\n",
        "\n",
        "training_batch_size = 64\n",
        "test_batch_size = 64\n",
        "num_rounds = 5\n",
        "lr = 0.001\n",
        "seed = 0\n",
        "client_size = 2\n",
        "criterion = F.nll_loss\n",
        "\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "fix_seed(seed)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "waDPLc2tO3ZO"
      },
      "outputs": [],
      "source": [
        "def prepare_dataloader(num_clients, myid, train=True, path=\"\"):\n",
        "    transform = transforms.Compose(\n",
        "        [transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]\n",
        "    )\n",
        "    if train:\n",
        "        dataset = datasets.MNIST(path, train=True, download=True, transform=transform)\n",
        "        idxs = list(range(len(dataset.data)))\n",
        "        random.shuffle(idxs)\n",
        "        idx = np.array_split(idxs, num_clients, 0)[myid - 1]\n",
        "        dataset.data = dataset.data[idx]\n",
        "        dataset.targets = dataset.targets[idx]\n",
        "        train_loader = torch.utils.data.DataLoader(\n",
        "            NumpyDataset(\n",
        "                x=dataset.data.numpy(),\n",
        "                y=dataset.targets.numpy(),\n",
        "                transform=transform,\n",
        "                return_idx=True,\n",
        "            ),\n",
        "            batch_size=training_batch_size,\n",
        "        )\n",
        "        return train_loader\n",
        "    else:\n",
        "        dataset = datasets.MNIST(path, train=False, download=True, transform=transform)\n",
        "        test_loader = torch.utils.data.DataLoader(\n",
        "            NumpyDataset(\n",
        "                x=dataset.data.numpy(),\n",
        "                y=dataset.targets.numpy(),\n",
        "                transform=transform,\n",
        "                return_idx=True,\n",
        "            ),\n",
        "            batch_size=test_batch_size,\n",
        "        )\n",
        "        return test_loader\n",
        "\n",
        "\n",
        "class Net(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(Net, self).__init__()\n",
        "        self.ln = nn.Linear(28 * 28, 10)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.ln(x.reshape(-1, 28 * 28))\n",
        "        output = F.log_softmax(x, dim=1)\n",
        "        return output"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423,
          "referenced_widgets": [
            "71200790faa54441b156d43c33795366",
            "e26247a66c97450cacb8156b61ed74b4",
            "3a446b54e6584d82ac690cd290c46aed",
            "3e79d779a68b4953a46ca52449e52f24",
            "fe686344a9f047818e1f6549460d020a",
            "3481611f2c9f46048c1450cbd210ab25",
            "99a468473c4845528580b3ac7578268c",
            "d641283bf53741dea791020760a84272",
            "e16dec22563a4ea2b4c267244ed47723",
            "787085e4349a4d228a60eb6d446b1c7f",
            "6c1a0fa45f25488993a865f0b5a315d9",
            "03ca00dcd6f34c7588fd826131df6919",
            "86be49128aa744ca93dd5b259c9834a3",
            "31a464e5919c457a90246891e7b6e6fc",
            "565de8de16ac463d9dda3370ad27c0c0",
            "8df973c458c6490aae4e5b66df29780d",
            "6b24a8dde86944a7ae8ec5ad6f65a35b",
            "9c438ce8792842b79da6726de1623222",
            "cdbefc13779c4484999a200579c4895e",
            "2ca0ee655b38471da5db1978b71680e1",
            "98b0e8a510f14286bc01996ff92478a9",
            "4bf74c9cd62b4a6699508f6a1fbd1082",
            "4e928c6ca9d74ad4bd2da6c7025939f2",
            "b0e69cba3f484d7ab1f349bcf58dc87d",
            "73a8f82ef0bc49ed8ae32b3e41f820c4",
            "f6dc1af8543a4ca58126e744485f86de",
            "2e5171e9240543578b7fa015430955d0",
            "c61b0aa64d6b4e0b829026816e13597e",
            "cccbb95a6e584c6ca6b7e2ffa7167e63",
            "f537bc943b594796866035da95b699a0",
            "80fc9eaeccac497fbd104142101f95e3",
            "ca169870e09b45dd9d158141ca90a150",
            "50a6d8e28626437b9684f22abfc59eee",
            "b9f82f60b05143f78fc0f7b03e6f39a2",
            "2e4bccb4ef4348579d897a8b3c2864a0",
            "6d153d749265478aa53f9e5fb68916ad",
            "7f038b9f588b4e88aca888ba00a75f11",
            "7514e57165754fa6bc0cc30663a0e0aa",
            "af57f137fb3d4663a4086aefbce536fe",
            "8116f33593f94546b11bce373a753ccc",
            "186e8a1aed4a4fef907e5971d07dd0fe",
            "e60ebebe030545809549bdb7924cebb2",
            "18dfb7f1aff74c1f90e4a2688a616a84",
            "b7b4dd00bf3e4e7ab26443c37759e935"
          ]
        },
        "id": "d1aSXndyO9rv",
        "outputId": "02ba657e-ac35-4ba1-d483-567a9ce0f38f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\n",
            "Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to MNIST/raw/train-images-idx3-ubyte.gz\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "71200790faa54441b156d43c33795366",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/9912422 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Extracting MNIST/raw/train-images-idx3-ubyte.gz to MNIST/raw\n",
            "\n",
            "Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\n",
            "Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to MNIST/raw/train-labels-idx1-ubyte.gz\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "03ca00dcd6f34c7588fd826131df6919",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/28881 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Extracting MNIST/raw/train-labels-idx1-ubyte.gz to MNIST/raw\n",
            "\n",
            "Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\n",
            "Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to MNIST/raw/t10k-images-idx3-ubyte.gz\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "4e928c6ca9d74ad4bd2da6c7025939f2",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/1648877 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Extracting MNIST/raw/t10k-images-idx3-ubyte.gz to MNIST/raw\n",
            "\n",
            "Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\n",
            "Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to MNIST/raw/t10k-labels-idx1-ubyte.gz\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "b9f82f60b05143f78fc0f7b03e6f39a2",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/4542 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Extracting MNIST/raw/t10k-labels-idx1-ubyte.gz to MNIST/raw\n",
            "\n"
          ]
        }
      ],
      "source": [
        "dataloaders = [prepare_dataloader(client_size + 1, c) for c in range(client_size + 1)]\n",
        "public_dataloader = dataloaders[0]\n",
        "local_dataloaders = dataloaders[1:]\n",
        "test_dataloader = prepare_dataloader(client_size, -1, train=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ozQ6dObgO_B-",
        "outputId": "083e761e-1019-4443-a369-abc9c90d172a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "epoch 1 (public - pretrain): [1.473225961858853, 1.5095995597945997]\n",
            "acc on validation dataset:  {'clients_score': [0.7988, 0.7907]}\n",
            "epoch 1 (local - pretrain): [0.831909927316367, 0.8403522956866426]\n",
            "acc on validation dataset:  {'clients_score': [0.8431, 0.8406]}\n",
            "epoch 1, client 0: 248.21629628539085\n",
            "epoch 1, client 1: 269.46991488337517\n",
            "epoch=1 acc on local datasets:  {'clients_score': [0.84605, 0.85175]}\n",
            "epoch=1 acc on public dataset:  {'clients_score': [0.84925, 0.8516]}\n",
            "epoch=1 acc on validation dataset:  {'clients_score': [0.8568, 0.8594]}\n",
            "epoch 2, client 0: 348.2690239548683\n",
            "epoch 2, client 1: 364.190059453249\n",
            "epoch=2 acc on local datasets:  {'clients_score': [0.85075, 0.85555]}\n",
            "epoch=2 acc on public dataset:  {'clients_score': [0.85395, 0.8567]}\n",
            "epoch=2 acc on validation dataset:  {'clients_score': [0.8601, 0.8641]}\n"
          ]
        }
      ],
      "source": [
        "clients = [\n",
        "    FedMDClient(Net().to(device), public_dataloader, output_dim=10, user_id=c)\n",
        "    for c in range(client_size)\n",
        "]\n",
        "local_optimizers = [optim.SGD(client.parameters(), lr=lr) for client in clients]\n",
        "\n",
        "server = FedMDServer(clients, Net().to(device))\n",
        "\n",
        "api = FedMDAPI(\n",
        "    server,\n",
        "    clients,\n",
        "    public_dataloader,\n",
        "    local_dataloaders,\n",
        "    F.nll_loss,\n",
        "    local_optimizers,\n",
        "    test_dataloader,\n",
        "    num_communication=2,\n",
        ")\n",
        "log = api.run()"
      ]
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "metadata": {
        "id": "LhrAmm6RFNSH"
      },
      "source": [
        "## MPI\n",
        "\n",
        "You can execute FedMD with MPI-backend via `MPIFedMDClientManager`, `MPIFedMDServerManager`, and `MPIFedMDAPI`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "978eu16pT3Ci",
        "outputId": "bbde739f-4437-4024-c788-41d26ecc917b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Writing mpi_fedmd.py\n"
          ]
        }
      ],
      "source": [
        "%%writefile mpi_fedmd.py\n",
        "import random\n",
        "from logging import getLogger\n",
        "\n",
        "import numpy as np\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torch.optim as optim\n",
        "from mpi4py import MPI\n",
        "from torchvision import datasets, transforms\n",
        "\n",
        "from aijack.collaborative.fedmd import FedMDAPI, FedMDClient, FedMDServer\n",
        "from aijack.collaborative.fedmd import MPIFedMDAPI, MPIFedMDClientManager, MPIFedMDServerManager\n",
        "from aijack.utils import NumpyDataset, accuracy_torch_dataloader\n",
        "\n",
        "logger = getLogger(__name__)\n",
        "\n",
        "training_batch_size = 64\n",
        "test_batch_size = 64\n",
        "num_rounds = 2\n",
        "lr = 0.001\n",
        "seed = 0\n",
        "\n",
        "\n",
        "def fix_seed(seed):\n",
        "    random.seed(seed)\n",
        "    np.random.seed(seed)\n",
        "    torch.manual_seed(seed)\n",
        "    torch.cuda.manual_seed_all(seed)\n",
        "    torch.backends.cudnn.deterministic = True\n",
        "\n",
        "\n",
        "def prepare_dataloader(num_clients, myid, train=True, path=\"\"):\n",
        "    transform = transforms.Compose(\n",
        "        [transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]\n",
        "    )\n",
        "    if train:\n",
        "        dataset = datasets.MNIST(path, train=True, download=True, transform=transform)\n",
        "        idxs = list(range(len(dataset.data)))\n",
        "        random.shuffle(idxs)\n",
        "        idx = np.array_split(idxs, num_clients, 0)[myid - 1]\n",
        "        dataset.data = dataset.data[idx]\n",
        "        dataset.targets = dataset.targets[idx]\n",
        "        train_loader = torch.utils.data.DataLoader(\n",
        "            NumpyDataset(x=dataset.data.numpy(), y=dataset.targets.numpy(), transform=transform, return_idx=True),\n",
        "             batch_size=training_batch_size\n",
        "        )\n",
        "        return train_loader\n",
        "    else:\n",
        "        dataset = datasets.MNIST(path, train=False, download=True, transform=transform)\n",
        "        test_loader = torch.utils.data.DataLoader(NumpyDataset(x=dataset.data.numpy(), y=dataset.targets.numpy(), transform=transform, return_idx=True),\n",
        "                                                  batch_size=test_batch_size)\n",
        "        return test_loader\n",
        "\n",
        "\n",
        "class Net(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(Net, self).__init__()\n",
        "        self.ln = nn.Linear(28 * 28, 10)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.ln(x.reshape(-1, 28 * 28))\n",
        "        output = F.log_softmax(x, dim=1)\n",
        "        return output\n",
        "\n",
        "def main():\n",
        "    fix_seed(seed)\n",
        "\n",
        "    comm = MPI.COMM_WORLD\n",
        "    myid = comm.Get_rank()\n",
        "    size = comm.Get_size()\n",
        "\n",
        "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "    model = Net()\n",
        "    model = model.to(device)\n",
        "    optimizer = optim.SGD(model.parameters(), lr=lr)\n",
        "\n",
        "    public_dataloader = prepare_dataloader(size - 1, 0, train=True)\n",
        "\n",
        "    if myid == 0:\n",
        "        dataloader = prepare_dataloader(size + 1, myid+1, train=False)\n",
        "        client_ids = list(range(1, size))\n",
        "        mpi_manager = MPIFedMDServerManager()\n",
        "        MPIFedMDServer = mpi_manager.attach(FedMDServer)\n",
        "        server = MPIFedMDServer(comm, [1, 2], model)\n",
        "        api = MPIFedMDAPI(\n",
        "            comm,\n",
        "            server,\n",
        "            True,\n",
        "            F.nll_loss,\n",
        "            None,\n",
        "            None,\n",
        "            num_communication=num_rounds,\n",
        "            device=device\n",
        "        )\n",
        "    else:\n",
        "        dataloader = prepare_dataloader(size + 1, myid + 1, train=True)\n",
        "        mpi_manager = MPIFedMDClientManager()\n",
        "        MPIFedMDClient = mpi_manager.attach(FedMDClient)\n",
        "        client = MPIFedMDClient(comm, model, public_dataloader, output_dim=10, user_id=myid)\n",
        "        api = MPIFedMDAPI(\n",
        "            comm,\n",
        "            client,\n",
        "            False,\n",
        "            F.nll_loss,\n",
        "            optimizer,\n",
        "            dataloader,\n",
        "            public_dataloader,\n",
        "            num_communication=num_rounds,\n",
        "            device=device\n",
        "        )\n",
        "\n",
        "    api.run()\n",
        "\n",
        "    if myid != 0:\n",
        "      print(f\"client_id={myid}: Accuracy on local dataset is \", accuracy_torch_dataloader(client, dataloader))\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hv4eSXSud8mg",
        "outputId": "ed14fde5-7f2c-4db4-c06a-3c1cca204416"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "client_id=1: Accuracy on local dataset is  0.8734666666666666\n",
            "client_id=2: Accuracy on local dataset is  0.8708\n"
          ]
        }
      ],
      "source": [
        "!mpiexec -np 3 --allow-run-as-root python /content/mpi_fedmd.py"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "FEvcX6BLs-SJ"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.1 (tags/v3.9.1:1e5d33e, Dec  7 2020, 17:08:21) [MSC v.1927 64 bit (AMD64)]"
    },
    "vscode": {
      "interpreter": {
        "hash": "caa2b01f75ba60e629eaa9e4dabde0c46b243c9a0484934eeb17ad8b3fc9c91a"
      }
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {}
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
