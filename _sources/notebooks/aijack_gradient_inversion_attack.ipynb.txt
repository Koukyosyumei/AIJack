{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {
    "id": "k0rUERH-551c"
   },
   "source": [
    "# Gradient-based Model Inversion Attack against Federated Learning\n",
    "\n",
    "In this tutorial, we will experiment gradient-based model inversion attack, which allows the malicious server of Federated Learning to reconstruct the private local dataset via shared gradients. You can implement five popular gradient-based model inversion attacks with AIJack. These methods reconstruct the private images by minimizing the distance between the fake gradients and the received gradients. Each method has its own strategy, such as the distance metric and regularization terms.\n",
    "\n",
    "One example is as follows. Since the server already knows the parameters of the global model $w_{t - 1}$, the server can estimate the private training sample $(X, Y)$ with the following optimization.\n",
    "\n",
    "$$\n",
    "X' \\leftarrow X' - \\lambda \\nabla_{X'} D\n",
    "$$\n",
    "\n",
    "$$\n",
    "Y' \\leftarrow Y' - \\lambda \\nabla_{Y'} D\n",
    "$$\n",
    "\n",
    ", where $D$ is the loss function calculated as follows:\n",
    "\n",
    "$$\n",
    "D = || \\nabla \\mathcal{l}(w_{t - 1}, X, Y) - \\nabla \\mathcal{l}(w_{t - 1}, X', Y') ||_{2}\n",
    "$$\n",
    "\n",
    "In other words, this attack tries to reconstruct the private training data by optimizing the fake data to generate gradients close enough to the received gradients from the client."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "background_save": true
    },
    "id": "2b1JISUQ5MXM"
   },
   "outputs": [],
   "source": [
    "import cv2\n",
    "import copy\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torchvision\n",
    "import torchvision.transforms as transforms\n",
    "from numpy import e\n",
    "from matplotlib import pyplot as plt\n",
    "import torch.optim as optim\n",
    "from tqdm.notebook import tqdm\n",
    "\n",
    "from aijack.collaborative.fedavg import FedAVGAPI, FedAVGClient, FedAVGServer\n",
    "from aijack.attack.inversion import GradientInversionAttackServerManager\n",
    "from torch.utils.data import DataLoader, TensorDataset\n",
    "from aijack.utils import NumpyDataset\n",
    "\n",
    "import warnings\n",
    "\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "background_save": true
    },
    "id": "CrFIlyBs5Se2"
   },
   "outputs": [],
   "source": [
    "class LeNet(nn.Module):\n",
    "    def __init__(self, channel=3, hideen=768, num_classes=10):\n",
    "        super(LeNet, self).__init__()\n",
    "        act = nn.Sigmoid\n",
    "        self.body = nn.Sequential(\n",
    "            nn.Conv2d(channel, 12, kernel_size=5, padding=5 // 2, stride=2),\n",
    "            nn.BatchNorm2d(12),\n",
    "            act(),\n",
    "            nn.Conv2d(12, 12, kernel_size=5, padding=5 // 2, stride=2),\n",
    "            nn.BatchNorm2d(12),\n",
    "            act(),\n",
    "            nn.Conv2d(12, 12, kernel_size=5, padding=5 // 2, stride=1),\n",
    "            nn.BatchNorm2d(12),\n",
    "            act(),\n",
    "        )\n",
    "        self.fc = nn.Sequential(nn.Linear(hideen, num_classes))\n",
    "\n",
    "    def forward(self, x):\n",
    "        out = self.body(x)\n",
    "        out = out.view(out.size(0), -1)\n",
    "        out = self.fc(out)\n",
    "        return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "background_save": true
    },
    "id": "7jfBlFUS5Uk3"
   },
   "outputs": [],
   "source": [
    "def prepare_dataloader(path=\"MNIST/.\", batch_size=64, shuffle=True):\n",
    "    at_t_dataset_train = torchvision.datasets.MNIST(\n",
    "        root=path, train=True, download=True\n",
    "    )\n",
    "\n",
    "    transform = transforms.Compose(\n",
    "        [transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))]\n",
    "    )\n",
    "\n",
    "    dataset = NumpyDataset(\n",
    "        at_t_dataset_train.train_data.numpy(),\n",
    "        at_t_dataset_train.train_labels.numpy(),\n",
    "        transform=transform,\n",
    "    )\n",
    "\n",
    "    dataloader = torch.utils.data.DataLoader(\n",
    "        dataset, batch_size=batch_size, shuffle=shuffle, num_workers=0\n",
    "    )\n",
    "    return dataloader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "background_save": true
    },
    "id": "W1SuaQLL7aTg"
   },
   "outputs": [],
   "source": [
    "torch.manual_seed(7777)\n",
    "\n",
    "shape_img = (28, 28)\n",
    "num_classes = 10\n",
    "channel = 1\n",
    "hidden = 588\n",
    "\n",
    "num_seeds = 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Zpt1sJxU9lVi"
   },
   "source": [
    "## Reconstruct Single Data\n",
    "\n",
    "First, we try to recover the following private image from the received gradients with the batch size of 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "background_save": true,
     "referenced_widgets": [
      "3569bb4d4af64a7290063559ef31f680",
      "909e2f5c8bf94c409941c22bcc8a2945",
      "88ccdc52d9e94985b3bf9d38f0d51663",
      "36f26d71566f4a8285c1ee2183fc3994"
     ]
    },
    "id": "z-dkdI2E5gE_",
    "outputId": "75a6aef5-53c3-4b09-a66a-2f9ba0f69b8d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\n",
      "Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to MNIST/./MNIST/raw/train-images-idx3-ubyte.gz\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3569bb4d4af64a7290063559ef31f680",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/9912422 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting MNIST/./MNIST/raw/train-images-idx3-ubyte.gz to MNIST/./MNIST/raw\n",
      "\n",
      "Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\n",
      "Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to MNIST/./MNIST/raw/train-labels-idx1-ubyte.gz\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "909e2f5c8bf94c409941c22bcc8a2945",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/28881 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting MNIST/./MNIST/raw/train-labels-idx1-ubyte.gz to MNIST/./MNIST/raw\n",
      "\n",
      "Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\n",
      "Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to MNIST/./MNIST/raw/t10k-images-idx3-ubyte.gz\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "88ccdc52d9e94985b3bf9d38f0d51663",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1648877 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting MNIST/./MNIST/raw/t10k-images-idx3-ubyte.gz to MNIST/./MNIST/raw\n",
      "\n",
      "Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\n",
      "Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to MNIST/./MNIST/raw/t10k-labels-idx1-ubyte.gz\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "36f26d71566f4a8285c1ee2183fc3994",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/4542 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting MNIST/./MNIST/raw/t10k-labels-idx1-ubyte.gz to MNIST/./MNIST/raw\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 72x72 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "device = torch.device(\"cuda:0\") if torch.cuda.is_available() else \"cpu\"\n",
    "dataloader = prepare_dataloader()\n",
    "for data in dataloader:\n",
    "    xs, ys = data[0], data[1]\n",
    "    break\n",
    "\n",
    "x = xs[:1]\n",
    "y = ys[:1]\n",
    "\n",
    "fig = plt.figure(figsize=(1, 1))\n",
    "plt.axis(\"off\")\n",
    "plt.imshow(x.detach().numpy()[0][0], cmap=\"gray\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "background_save": true
    },
    "id": "UA3YUHqi6nq2"
   },
   "outputs": [],
   "source": [
    "criterion = nn.CrossEntropyLoss()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zsetq0Lc-NVd"
   },
   "source": [
    "### DLG\n",
    "\n",
    "You can convert the normal server to the malicious attacker with `GradientInversionAttackServerManager`.\n",
    "\n",
    "https://dlg.mit.edu/assets/NeurIPS19_deep_leakage_from_gradients.pdf\n",
    "\n",
    "- distance metric = L2 norm\n",
    "- optimize labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 161
    },
    "id": "4BAe6aEu5odr",
    "outputId": "027167b7-1a67-4bce-be42-d4b135d72767"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "communication 0, epoch 0: client-1 2.285383462905884\n",
      "iter=80: loss did not improve in the last 50 rounds.\n",
      "iter=73: loss did not improve in the last 50 rounds.\n",
      "iter=70: loss did not improve in the last 50 rounds.\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 360x144 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "manager = GradientInversionAttackServerManager(\n",
    "    (1, 28, 28),\n",
    "    num_trial_per_communication=5,\n",
    "    log_interval=0,\n",
    "    num_iteration=100,\n",
    "    distancename=\"l2\",\n",
    "    device=device,\n",
    "    lr=1.0,\n",
    ")\n",
    "DLGFedAVGServer = manager.attach(FedAVGServer)\n",
    "\n",
    "client = FedAVGClient(\n",
    "    LeNet(channel=channel, hideen=hidden, num_classes=num_classes).to(device),\n",
    "    lr=1.0,\n",
    "    device=device,\n",
    ")\n",
    "server = DLGFedAVGServer(\n",
    "    [client],\n",
    "    LeNet(channel=channel, hideen=hidden, num_classes=num_classes).to(device),\n",
    "    lr=1.0,\n",
    "    device=device,\n",
    ")\n",
    "\n",
    "local_dataloaders = [DataLoader(TensorDataset(x, y))]\n",
    "local_optimizers = [optim.SGD(client.parameters(), lr=1.0)]\n",
    "\n",
    "api = FedAVGAPI(\n",
    "    server,\n",
    "    [client],\n",
    "    criterion,\n",
    "    local_optimizers,\n",
    "    local_dataloaders,\n",
    "    num_communication=1,\n",
    "    local_epoch=1,\n",
    "    use_gradients=True,\n",
    "    device=device,\n",
    ")\n",
    "\n",
    "api.run()\n",
    "\n",
    "fig = plt.figure(figsize=(5, 2))\n",
    "for s, result in enumerate(server.attack_results[0]):\n",
    "    ax = fig.add_subplot(1, len(server.attack_results[0]), s + 1)\n",
    "    ax.imshow(result[0].cpu().detach().numpy()[0][0], cmap=\"gray\")\n",
    "    ax.axis(\"off\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "G1U9EU7UAsju"
   },
   "source": [
    "### GS Attack\n",
    "\n",
    "https://arxiv.org/abs/2003.14053\n",
    "\n",
    "- distance metric = cosine similarity\n",
    "- optimize labels\n",
    "- regularization: total-variance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 178
    },
    "id": "PJAu_poY6q7L",
    "outputId": "30d1c8bc-3f36-44e8-aee7-486d6609254c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "communication 0, epoch 0: client-1 2.371312141418457\n",
      "iter=89: loss did not improve in the last 50 rounds.\n",
      "iter=72: loss did not improve in the last 50 rounds.\n",
      "iter=71: loss did not improve in the last 50 rounds.\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 360x144 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "manager = GradientInversionAttackServerManager(\n",
    "    (1, 28, 28),\n",
    "    num_trial_per_communication=5,\n",
    "    log_interval=0,\n",
    "    num_iteration=100,\n",
    "    tv_reg_coef=0.01,\n",
    "    distancename=\"cossim\",\n",
    "    device=device,\n",
    "    lr=1.0,\n",
    ")\n",
    "GSFedAVGServer = manager.attach(FedAVGServer)\n",
    "\n",
    "client = FedAVGClient(\n",
    "    LeNet(channel=channel, hideen=hidden, num_classes=num_classes).to(device),\n",
    "    lr=1.0,\n",
    "    device=device,\n",
    ")\n",
    "server = GSFedAVGServer(\n",
    "    [client],\n",
    "    LeNet(channel=channel, hideen=hidden, num_classes=num_classes).to(device),\n",
    "    lr=1.0,\n",
    "    device=device,\n",
    ")\n",
    "\n",
    "local_dataloaders = [DataLoader(TensorDataset(x, y))]\n",
    "local_optimizers = [optim.SGD(client.parameters(), lr=1.0)]\n",
    "\n",
    "api = FedAVGAPI(\n",
    "    server,\n",
    "    [client],\n",
    "    criterion,\n",
    "    local_optimizers,\n",
    "    local_dataloaders,\n",
    "    num_communication=1,\n",
    "    local_epoch=1,\n",
    "    use_gradients=True,\n",
    "    device=device,\n",
    ")\n",
    "\n",
    "api.run()\n",
    "\n",
    "fig = plt.figure(figsize=(5, 2))\n",
    "for s, result in enumerate(server.attack_results[0]):\n",
    "    ax = fig.add_subplot(1, len(server.attack_results[0]), s + 1)\n",
    "    ax.imshow(result[0].cpu().detach().numpy()[0][0], cmap=\"gray\")\n",
    "    ax.axis(\"off\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dHNW787NAhFR"
   },
   "source": [
    "### iDLG Attack\n",
    "\n",
    "https://arxiv.org/abs/2001.02610\n",
    "\n",
    "- distance metric = L2 norm\n",
    "- analytically estimate a label from the gradients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 108
    },
    "id": "bv0qW14888Kh",
    "outputId": "1abf4cd3-ca40-4c82-c0e3-3d1c67c2289b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "communication 0, epoch 0: client-1 2.371312141418457\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 360x144 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "manager = GradientInversionAttackServerManager(\n",
    "    (1, 28, 28),\n",
    "    num_trial_per_communication=5,\n",
    "    log_interval=0,\n",
    "    num_iteration=1000,\n",
    "    optimizer_class=torch.optim.SGD,\n",
    "    distancename=\"l2\",\n",
    "    optimize_label=False,\n",
    "    device=device,\n",
    "    lr=1.0,\n",
    ")\n",
    "iDLGFedAVGServer = manager.attach(FedAVGServer)\n",
    "\n",
    "client = FedAVGClient(\n",
    "    LeNet(channel=channel, hideen=hidden, num_classes=num_classes).to(device),\n",
    "    lr=1.0,\n",
    "    device=device,\n",
    ")\n",
    "server = iDLGFedAVGServer(\n",
    "    [client],\n",
    "    LeNet(channel=channel, hideen=hidden, num_classes=num_classes).to(device),\n",
    "    lr=1.0,\n",
    "    device=device,\n",
    ")\n",
    "\n",
    "local_dataloaders = [DataLoader(TensorDataset(x, y))]\n",
    "local_optimizers = [optim.SGD(client.parameters(), lr=1.0)]\n",
    "\n",
    "api = FedAVGAPI(\n",
    "    server,\n",
    "    [client],\n",
    "    criterion,\n",
    "    local_optimizers,\n",
    "    local_dataloaders,\n",
    "    num_communication=1,\n",
    "    local_epoch=1,\n",
    "    use_gradients=True,\n",
    "    device=device,\n",
    ")\n",
    "\n",
    "api.run()\n",
    "\n",
    "fig = plt.figure(figsize=(5, 2))\n",
    "for s, result in enumerate(server.attack_results[0]):\n",
    "    ax = fig.add_subplot(1, len(server.attack_results[0]), s + 1)\n",
    "    ax.imshow(result[0].cpu().detach().numpy()[0][0], cmap=\"gray\")\n",
    "    ax.axis(\"off\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-CTIH-k_AJ3x"
   },
   "source": [
    "### CPL Attack\n",
    "\n",
    "https://arxiv.org/abs/2004.10397\n",
    "\n",
    "- distance metric = L2 norm\n",
    "- analytically estimate an label from the gradients\n",
    "- regularization: label-matching"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 108
    },
    "id": "Lz-UJfvR9MDZ",
    "outputId": "d343c25b-4319-4586-9bb4-fab2deaa2069"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "communication 0, epoch 0: client-1 2.371312141418457\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 360x144 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "manager = GradientInversionAttackServerManager(\n",
    "    (1, 28, 28),\n",
    "    num_trial_per_communication=5,\n",
    "    log_interval=0,\n",
    "    num_iteration=1000,\n",
    "    optimizer_class=torch.optim.SGD,\n",
    "    distancename=\"l2\",\n",
    "    optimize_label=False,\n",
    "    lm_reg_coef=0.01,\n",
    "    lr=1.0,\n",
    ")\n",
    "CPLFedAVGServer = manager.attach(FedAVGServer)\n",
    "\n",
    "client = FedAVGClient(\n",
    "    LeNet(channel=channel, hideen=hidden, num_classes=num_classes), lr=1.0\n",
    ")\n",
    "server = CPLFedAVGServer(\n",
    "    [client], LeNet(channel=channel, hideen=hidden, num_classes=num_classes), lr=1.0\n",
    ")\n",
    "\n",
    "local_dataloaders = [DataLoader(TensorDataset(x, y))]\n",
    "local_optimizers = [optim.SGD(client.parameters(), lr=1.0)]\n",
    "\n",
    "api = FedAVGAPI(\n",
    "    server,\n",
    "    [client],\n",
    "    criterion,\n",
    "    local_optimizers,\n",
    "    local_dataloaders,\n",
    "    num_communication=1,\n",
    "    local_epoch=1,\n",
    "    use_gradients=True,\n",
    ")\n",
    "\n",
    "api.run()\n",
    "\n",
    "fig = plt.figure(figsize=(5, 2))\n",
    "for s, result in enumerate(server.attack_results[0]):\n",
    "    ax = fig.add_subplot(1, len(server.attack_results[0]), s + 1)\n",
    "    ax.imshow(result[0].cpu().detach().numpy()[0][0], cmap=\"gray\")\n",
    "    ax.axis(\"off\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "e-TYM84K_9wn"
   },
   "source": [
    "## Reconstruct Batched Data\n",
    "\n",
    "Second, we simulate the situatino with larger batch size. We try to recover the bellow three images."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 89
    },
    "id": "CIrFdMAF-4LX",
    "outputId": "2436568f-f281-4b1a-8629-a84b4872b5ad"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 216x144 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "batch_size = 3\n",
    "x_batch = xs[:batch_size]\n",
    "y_batch = ys[:batch_size]\n",
    "\n",
    "fig = plt.figure(figsize=(3, 2))\n",
    "for bi in range(batch_size):\n",
    "    ax = fig.add_subplot(1, batch_size, bi + 1)\n",
    "    ax.imshow(x_batch[bi].detach().numpy()[0], cmap=\"gray\")\n",
    "    ax.axis(\"off\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Z8Sh_1Fn_VeG"
   },
   "source": [
    "### GradInversion\n",
    "\n",
    "https://arxiv.org/abs/2104.07586\n",
    "\n",
    "- distance metric = L2 norm\n",
    "- analytically estimate labels from the gradients\n",
    "- reguralization: total-variance, l2, bn, and group-consistency"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 89
    },
    "id": "5Dnp5tQoA1qm",
    "outputId": "07e5fe9c-eedd-4496-8e56-40538f072e5c"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 216x144 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from aijack.attack.inversion import GradientInversion_Attack\n",
    "\n",
    "net = LeNet(channel=channel, hideen=hidden, num_classes=num_classes)\n",
    "pred = net(x_batch)\n",
    "loss = criterion(pred, y_batch)\n",
    "received_gradients = torch.autograd.grad(loss, net.parameters())\n",
    "received_gradients = [cg.detach() for cg in received_gradients]\n",
    "\n",
    "gradinversion = GradientInversion_Attack(\n",
    "    net,\n",
    "    (1, 28, 28),\n",
    "    num_iteration=1000,\n",
    "    lr=1e2,\n",
    "    log_interval=0,\n",
    "    optimizer_class=torch.optim.SGD,\n",
    "    distancename=\"l2\",\n",
    "    optimize_label=False,\n",
    "    bn_reg_layers=[net.body[1], net.body[4], net.body[7]],\n",
    "    group_num=3,\n",
    "    tv_reg_coef=0.00,\n",
    "    l2_reg_coef=0.0001,\n",
    "    bn_reg_coef=0.001,\n",
    "    gc_reg_coef=0.001,\n",
    ")\n",
    "\n",
    "result = gradinversion.group_attack(received_gradients, batch_size=batch_size)\n",
    "\n",
    "fig = plt.figure(figsize=(3, 2))\n",
    "for bid in range(batch_size):\n",
    "    ax1 = fig.add_subplot(1, batch_size, bid + 1)\n",
    "    ax1.imshow((sum(result[0]) / len(result[0])).detach().numpy()[bid][0], cmap=\"gray\")\n",
    "    ax1.axis(\"off\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "background_save": true
    },
    "id": "cjSDtkOYC4AF"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "provenance": []
  },
  "gpuClass": "standard",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
